package lk.PremierLeague.Footballcontroller;
import lk.PremierLeague.FootballEntity.FootballClub;
import lk.PremierLeague.FootballEntity.MatchesPlayed;
import lk.PremierLeague.FootballModel.LeagueManagerImpl.PremierLeagueManager;
import org.springframework.web.bind.annotation.*;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Random;


@RestController
@CrossOrigin(origins ="http://localhost:4200")//Used to send the data from localhost:8080 to localhost:4200
@RequestMapping("/lk.PremierLeague/Football")//Api


public class FootballController {

    @GetMapping("/premier-league-table") //Api of the premier league table
    public ArrayList<FootballClub> getPremierLeagueClubs()  {

        Collections.sort(PremierLeagueManager.footballClubs, (o1, o2) -> {
            int firstTot = o1.getTotalPoints();
            int secondTot = o2.getTotalPoints();                        //sort the Premier League Table according to Total points scored,if Total points are same then it is sorted according the goal difference
            if(firstTot==secondTot){
                int firstGoalDif = o1.getGoalDifference();
                int secondGoalDif = o2.getGoalDifference();
                return Integer.compare(secondGoalDif,firstGoalDif);
            }
            else{
                return Integer.compare(secondTot,firstTot);
            }
        });
        return PremierLeagueManager.footballClubs;   //return the Premier League Arraylist
    }

    @GetMapping("/total-points-sorted")//Api of the premier league table sorted according to total points
    public ArrayList<FootballClub> getTotalPointsSortedClubs()  {

        Collections.sort(PremierLeagueManager.footballClubs, (o1, o2) -> {
            int firstTot = o1.getTotalPoints();                   //sort the Premier League Table according to Total points scored
            int  secondTot= o2.getTotalPoints();
            return Integer.compare(secondTot,firstTot);
        });

        return PremierLeagueManager.footballClubs; //return the Premier League Arraylist sorted according to the total points
    }

    @GetMapping("/goals-scored-sorted")//Api of the premier league table sorted according to number of goals scored
    public ArrayList<FootballClub> getGoalsScoredSortedClubs()  {
        Collections.sort(PremierLeagueManager.footballClubs, (o1, o2) -> {
            int roll1 = o1.getGoalScored();                       //sort the Premier League Table according to number of goals scored
            int roll2 = o2.getGoalScored();
            return Integer.compare(roll2,roll1);
        });

        return PremierLeagueManager.footballClubs ; //return the Premier League Arraylist sorted according to the goals scored
    }

    @GetMapping("/no-of-wins-sorted")//Api of the premier league table sorted according to number of number of wins
    public ArrayList<FootballClub> getNoOfWinsSortedClubs()  {

        Collections.sort(PremierLeagueManager.footballClubs, (o1, o2) -> {
            int roll1 = o1.getNumberOfWins();
            int roll2 = o2.getNumberOfWins();                  //sort the Premier League Table according to number of wins
            return Integer.compare(roll2,roll1);
        });

        return PremierLeagueManager.footballClubs ;//return the Premier League Arraylist sorted according to the number of wins
    }

    @GetMapping("/match-date-sorted")//Api of the Matches played table sorted according the match date in descending order
    public ArrayList<MatchesPlayed> getPlayedMatchSortedClubs() {
        Collections.sort(PremierLeagueManager.matchesPlayed, new Comparator<MatchesPlayed>() {
            @Override
            public int compare(MatchesPlayed o1, MatchesPlayed o2) {     //sort the Played matches in descending order of match date
                return o2.getMatchDate().compareTo(o1.getMatchDate());
            }
        });
        return PremierLeagueManager.matchesPlayed;//return the matches played Arraylist sorted according to the Match Date.
    }

    @GetMapping("/matches-played")//Api of the Matches played table
    public ArrayList<MatchesPlayed> getAllMatchesPlayed() {
        return PremierLeagueManager.matchesPlayed;//return the matches played Arraylist.
    }

    @GetMapping("/random-match")//Api of the random Matches Played generated by the user
    public ArrayList<MatchesPlayed> getRandomMatch() {
        Random rand = new Random();
        int randomDay=rand.nextInt(31)+1;
        int randomMonth=rand.nextInt(12)+1;
        int randomYear=rand.nextInt(2120-2020)+2020; //generate a random value 20 years from 20202
        String matchDate= String.format("%02d",randomDay) +"/"+String.format("%02d",randomMonth) +"/"+ randomYear;;
        DateTimeFormatter dateTimeFormatter=DateTimeFormatter.ofPattern("dd/MM/yyyy");
        LocalDate localDate=LocalDate.parse(matchDate,dateTimeFormatter);


        int randIndex1 = rand.nextInt(PremierLeagueManager.footballClubs.size());
        String firstClub =(PremierLeagueManager.footballClubs.get(randIndex1).getClubName());

        String result;
        String secondClub;
        int goalDiff;


        int randIndex2;
        while(true){
            randIndex2 = rand.nextInt(PremierLeagueManager.footballClubs.size());
            if(randIndex1==randIndex2){
                continue;
            }
            else{
                secondClub =(PremierLeagueManager.footballClubs.get(randIndex2).getClubName());
                break;
            }
        }

        int firstClubGoals = rand.nextInt(20);

        int secondClubGoals = rand.nextInt(20);


        PremierLeagueManager.footballClubs.get(randIndex1).setGoalScored(PremierLeagueManager.footballClubs.get(randIndex1).getGoalScored()+firstClubGoals);

        PremierLeagueManager.footballClubs.get(randIndex2).setGoalScored(PremierLeagueManager.footballClubs.get(randIndex2).getGoalScored()+secondClubGoals);

        PremierLeagueManager.footballClubs.get(randIndex1).setMatchesPlayed(PremierLeagueManager.footballClubs.get(randIndex1).getMatchesPlayed()+1);

        PremierLeagueManager.footballClubs.get(randIndex2).setMatchesPlayed(PremierLeagueManager.footballClubs.get(randIndex2).getMatchesPlayed()+1);



        if(firstClubGoals==secondClubGoals) {
            PremierLeagueManager.footballClubs.get(randIndex1).setNumberOfDraws(PremierLeagueManager.footballClubs.get(randIndex1).getNumberOfDraws()+1);
            PremierLeagueManager.footballClubs.get(randIndex1).setTotalPoints(PremierLeagueManager.footballClubs.get(randIndex1).getTotalPoints()+1);
            PremierLeagueManager.footballClubs.get(randIndex2).setNumberOfDraws(PremierLeagueManager.footballClubs.get(randIndex2).getNumberOfDraws()+1);
            PremierLeagueManager.footballClubs.get(randIndex2).setTotalPoints(PremierLeagueManager.footballClubs.get(randIndex2).getTotalPoints()+1);
            result="The match is a Draw";

        }
        else if (firstClubGoals>secondClubGoals){
            PremierLeagueManager.footballClubs.get(randIndex1).setNumberOfWins(PremierLeagueManager.footballClubs.get(randIndex1).getNumberOfWins()+1);

            PremierLeagueManager.footballClubs.get(randIndex1).setTotalPoints(PremierLeagueManager.footballClubs.get(randIndex1).getTotalPoints()+3);

            PremierLeagueManager.footballClubs.get(randIndex2).setNumberOfDefeats(PremierLeagueManager.footballClubs.get(randIndex2).getNumberOfDefeats()+1);

            PremierLeagueManager.footballClubs.get(randIndex1).setGoalsReceived(PremierLeagueManager.footballClubs.get(randIndex1).getGoalsReceived()+secondClubGoals);

            goalDiff=firstClubGoals-secondClubGoals;
            PremierLeagueManager.footballClubs.get(randIndex1).setGoalDifference(PremierLeagueManager.footballClubs.get(randIndex1).getGoalDifference()+goalDiff);
            PremierLeagueManager.footballClubs.get(randIndex2).setGoalDifference((PremierLeagueManager.footballClubs.get(randIndex2).getGoalDifference()+goalDiff));

            result=firstClub+"  Won the match";

        }
        else{
            PremierLeagueManager.footballClubs.get(randIndex2).setNumberOfWins(PremierLeagueManager.footballClubs.get(randIndex2).getNumberOfWins()+1);

            PremierLeagueManager.footballClubs.get(randIndex2).setTotalPoints(PremierLeagueManager.footballClubs.get(randIndex2).getTotalPoints()+3);

            PremierLeagueManager.footballClubs.get(randIndex1).setNumberOfDefeats(PremierLeagueManager.footballClubs.get(randIndex1).getNumberOfDefeats()+1);

            PremierLeagueManager.footballClubs.get(randIndex2).setGoalsReceived(PremierLeagueManager.footballClubs.get(randIndex2).getGoalsReceived()+firstClubGoals);

            goalDiff=secondClubGoals-firstClubGoals;
            PremierLeagueManager.footballClubs.get(randIndex2).setGoalDifference(PremierLeagueManager.footballClubs.get(randIndex2).getGoalDifference()+goalDiff);
            PremierLeagueManager.footballClubs.get(randIndex1).setGoalDifference(PremierLeagueManager.footballClubs.get(randIndex1).getGoalDifference()+goalDiff);

            result=secondClub+"  Won the match";

        }
        MatchesPlayed matchPlayed=new MatchesPlayed(localDate,firstClub,secondClub,firstClubGoals,secondClubGoals,result);
        PremierLeagueManager.matchesPlayed.add(matchPlayed); //Adds the randomly played match to the macthes played arraylist
        return PremierLeagueManager.matchesPlayed;  //returns the matches played arraylist
    }


    @RequestMapping("/match-date")//Api to check the date entered to search match details by the user is correct or wrong
    @PostMapping
    public void userEnteredDate(@RequestBody String date)  {
        DateTimeFormatter formatter=DateTimeFormatter.ofPattern("dd/MM/yyyy");
        LocalDate localDate=LocalDate.parse(date,formatter);

        for(MatchesPlayed matchesPlayed:PremierLeagueManager.matchesPlayed){
            if(matchesPlayed.getMatchDate().equals(localDate)){
                PremierLeagueManager.matchDateList.add(matchesPlayed);//Adds the date searched match to the match Date list arraylist
            }
        }
    }

    @GetMapping("/return-match-detail")//Api to send the details of the searched match by date from the user
    public ArrayList<MatchesPlayed> filteredMatchDetails() {
        return PremierLeagueManager.matchDateList;
    }


}
